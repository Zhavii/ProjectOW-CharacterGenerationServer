name: Deploy

on:
  - push

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci --ignore-scripts
        
      - name: Setup SSH Key
        run: |
          install -m 600 -D /dev/null ~/.ssh/deploy_key
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key
          
      # First, copy the files to the server
      - name: Copy Files to VM
        env:
          SSH_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          SSH_HOST: ${{ secrets.AZURE_VM_IP }}
        run: |
          # Create a tar of the current directory
          tar -czf deploy.tar.gz .
          
          # Copy the tar to the server
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.tar.gz $SSH_USERNAME@$SSH_HOST:~/deploy.tar.gz
          
      - name: Deploy to VM
        env:
          SSH_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          SSH_HOST: ${{ secrets.AZURE_VM_IP }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST "
            set -e  # Exit on any error

            # Kill any existing node processes
            sudo pkill node || true

            # Clean up PM2
            sudo pm2 delete all || true
            
            # Extract the new files to a temp directory
            rm -rf ~/temp_deploy
            mkdir -p ~/temp_deploy
            cd ~/temp_deploy
            tar -xzf ~/deploy.tar.gz
            
            # Create .env file with secrets
            cat > .env << 'EOL'
            CENTRAL_SERVER="${{ secrets.CENTRAL_SERVER }}"
            DO_ENDPOINT="${{ secrets.DO_ENDPOINT }}"
            DO_SPACE_ENDPOINT="${{ secrets.DO_SPACE_ENDPOINT }}"
            DO_SPACE_ID="${{ secrets.DO_SPACE_ID }}"
            DO_SPACE_KEY="${{ secrets.DO_SPACE_KEY }}"
            DO_SPACE_NAME="${{ secrets.DO_SPACE_NAME }}"
            MONGO_URI="${{ secrets.MONGO_URI }}"
            PORT="${{ secrets.PORT }}"
            EOL

            # Install dependencies
            npm ci --production

            # Backup current app if it exists
            if [ -d ~/myapp ]; then
              rm -rf ~/myapp.old || true
              mv ~/myapp ~/myapp.old
            fi

            # Move new version into place
            mv ~/temp_deploy ~/myapp

            # Cleanup
            rm -rf ~/myapp.old ~/deploy.tar.gz || true

            # Start the application
            cd ~/myapp
            pm2 save

            # Verify the application is running
            pm2 list
            echo 'Deployment completed. Checking application status...'
            sleep 5
            pm2 status"

  run:
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup SSH Key
        run: |
          install -m 600 -D /dev/null ~/.ssh/deploy_key
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key
          
      - name: Deploy to VM
        env:
          SSH_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          SSH_HOST: ${{ secrets.AZURE_VM_IP }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST "
            cd ~/myapp
            pm2 kill
            NODE_ENV=production pm2 start app/app.js --name app --time"