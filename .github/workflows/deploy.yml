name: Deploy
'on':
  - push
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: npm
      - name: Install Dependencies
        run: npm ci --ignore-scripts
      - name: Setup SSH Key
        run: |
          install -m 600 -D /dev/null ~/.ssh/deploy_key
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key
      - name: Deploy to VM
        env:
          SSH_USERNAME: '${{ secrets.AZURE_VM_USERNAME }}'
          SSH_HOST: '${{ secrets.AZURE_VM_IP }}'
        run: >
          # Create a staging directory

          mkdir -p staging


          # Copy files to staging (excluding node_modules and .git)

          rsync -av --exclude='node_modules' --exclude='.git' . staging/


          # Create tar from staging directory

          cd staging

          tar -czf ../deploy.tar.gz .

          cd ..


          # Copy the tar file to the server

          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.tar.gz
          $SSH_USERNAME@$SSH_HOST:~/deploy.tar.gz


          # Execute deployment commands

          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no
          $SSH_USERNAME@$SSH_HOST "
            set -ex  # Add -x for debugging
            
            # Show current state
            echo 'Current directory contents:'
            ls -la
            
            # Clean up and prepare directories
            rm -rf ~/temp_deploy
            mkdir -p ~/temp_deploy
            cd ~/temp_deploy
            
            # Extract and show files
            tar -xzf ~/deploy.tar.gz
            echo 'Extracted contents:'
            ls -R
            
            # Set up environment
            cat > .env << 'ENVFILE'
           CENTRAL_SERVER='${{ secrets.CENTRAL_SERVER }}'
           DO_ENDPOINT='${{ secrets.DO_ENDPOINT }}'
           DO_SPACE_ENDPOINT='${{ secrets.DO_SPACE_ENDPOINT }}'
           DO_SPACE_ID='${{ secrets.DO_SPACE_ID }}'
           DO_SPACE_KEY='${{ secrets.DO_SPACE_KEY }}'
           DO_SPACE_NAME='${{ secrets.DO_SPACE_NAME }}'
           MONGO_URI='${{ secrets.MONGO_URI }}'
           PORT='${{ secrets.PORT }}'
           ENVFILE

            # Show env file contents (excluding sensitive data)
            echo 'Environment file created with these variables:'
            grep -v 'KEY\|URI' .env || true
            
            # Install dependencies
            npm ci --production
            
            # Use rsync instead of mv for more reliable copying
            rsync -av --delete ~/temp_deploy/ ~/myapp/
            
            # Start application with PM2
            cd ~/myapp
            echo 'Final app directory contents:'
            ls -R
            cat app/app.js
            
            NODE_ENV=production pm2 start app/app.js --name app
            pm2 save"
  verify:
    needs: deploy
    if: '${{ needs.deploy.result == ''success'' }}'
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        run: |
          install -m 600 -D /dev/null ~/.ssh/deploy_key
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key
      - name: Wait and Verify Deployment
        env:
          SSH_USERNAME: '${{ secrets.AZURE_VM_USERNAME }}'
          SSH_HOST: '${{ secrets.AZURE_VM_IP }}'
        run: >
          echo "Waiting for server to start..."

          sleep 15


          echo "Verifying deployment via SSH..."

          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no
          $SSH_USERNAME@$SSH_HOST "
            cd ~/myapp
            
            if [ -f app/app.js ]; then
              echo 'Checking app.js contents...'
              cat app/app.js
              
              echo 'Starting app...'
              pm2 delete all || true
              pm2 flush
              NODE_ENV=production pm2 start app/app.js --name app
              pm2 save
              
              echo 'PM2 status:'
              pm2 list
            else
              echo 'app.js not found in expected location'
              exit 1
            fi"