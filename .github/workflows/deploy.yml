name: Deploy

on:
  - push

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci --ignore-scripts
        
      - name: Setup SSH Key
        run: |
          install -m 600 -D /dev/null ~/.ssh/deploy_key
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key
          
      - name: Deploy to VM
        env:
          SSH_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          SSH_HOST: ${{ secrets.AZURE_VM_IP }}
        run: |
          # Create tar directly without creating a new directory
          tar --exclude='node_modules' --exclude='.git' -czf deploy.tar.gz ./*
          
          # Copy the tar file to the server
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.tar.gz $SSH_USERNAME@$SSH_HOST:~/deploy.tar.gz
          
          # Execute deployment commands
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST "
            set -e
            
            # Stop existing application
            pm2 delete all || true
            sudo pkill node || true
            
            # Clean up and prepare directories
            rm -rf ~/temp_deploy
            mkdir -p ~/temp_deploy
            cd ~/temp_deploy
            
            # Extract new files
            tar -xzf ~/deploy.tar.gz
            rm ~/deploy.tar.gz
            
            # Set up environment
            cat > .env << 'EOL'
            CENTRAL_SERVER='${{ secrets.CENTRAL_SERVER }}'
            DO_ENDPOINT='${{ secrets.DO_ENDPOINT }}'
            DO_SPACE_ENDPOINT='${{ secrets.DO_SPACE_ENDPOINT }}'
            DO_SPACE_ID='${{ secrets.DO_SPACE_ID }}'
            DO_SPACE_KEY='${{ secrets.DO_SPACE_KEY }}'
            DO_SPACE_NAME='${{ secrets.DO_SPACE_NAME }}'
            MONGO_URI='${{ secrets.MONGO_URI }}'
            PORT='${{ secrets.PORT }}'
            EOL
            
            # Install dependencies
            npm ci --production
            
            # Backup and replace application directory
            if [ -d ~/myapp ]; then
              mv ~/myapp ~/myapp_backup
            fi
            mv ~/temp_deploy ~/myapp
            rm -rf ~/myapp_backup
            
            # Start application
            cd ~/myapp
            pm2 start app/app.js --name app --time
            
            # Save PM2 configuration
            pm2 save
            
            echo 'Deployment completed. Current process list:'
            pm2 list"

  verify:
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Verify Deployment
        env:
          SSH_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          SSH_HOST: ${{ secrets.AZURE_VM_IP }}
        run: |
          echo "Verifying deployment..."
          curl -k https://${{ secrets.AZURE_VM_IP }}